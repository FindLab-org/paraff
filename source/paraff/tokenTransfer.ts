
import { Token, TOKENS } from "./vocab";



const make = (): number[][] => {
	const PAD = /PAD/;
	const MSUM = /MSUM/;
	const BOS = /BOS/;
	const EOS = /EOS/;
	const BOM = /BOM/;
	const EOM = /EOM/;
	const VB = /VB/;
	const S = /^S/;
	const C = /^C/;
	const K = /^K/;
	const TN = /^TN/;
	const TD = /^TD/;
	const a = /^[abcdefg]$/;
	const A = /^A/;
	const Osb = /Osub/;
	const Osp = /Osup/;
	const Ov = /^O[0v]/;
	const Dn = /^D\d+/;
	const Dot = /Dot/;
	const B = /^B/;
	const M= /^M/;
	const R = /Rest|RSpace/;
	const W = /^W/;
	const G = /G/;
	const TM = /^TM\d+/;
	const TC = /^TC\d+/;
	const E = /^E\w+/;

	const groups = [PAD, MSUM, BOS, EOS, BOM, EOM, VB, S, C, K, TN, TD, a, A, Osb, Osp, Ov, Dn, Dot, B, M, R, W, G, TM, TC, E]
		.map(pattern => TOKENS.filter(token => pattern.test(token)).map(t => Token[t]));

	const group_mask = [
	//	PAD	MSU	BOS	EOS	BOM	EOM	VB	S	C	K	TN	TD	a	A	Osb	Osp	Ov	Dn	Dot	B	M	R	W	G	TM	TC	E
		[1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// PAD
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// MSUM
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// BOS
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// EOS
		[0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// BOM
		[1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// EOM
		[0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// VB
		[0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	1,	1,	1,	0],	// S
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	1,	1,	1,	0],	// C
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// K
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// TN
		[0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// TD
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	1,	1,	1,	0,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0],	// a
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	1,	0,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0],	// A
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	1,	0,	0,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0],	// Osb
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	1,	0,	1,	0,	0,	0,	0,	1,	0,	0,	0,	0],	// Osp
		[0,	0,	0,	0,	0,	1,	1,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	1,	1,	1,	0],	// Ov
		[0,	0,	0,	0,	0,	1,	1,	1,	1,	0,	0,	0,	1,	0,	0,	0,	1,	0,	1,	1,	1,	1,	0,	1,	1,	1,	1],	// Dn
		[0,	0,	0,	0,	0,	1,	1,	1,	1,	0,	0,	0,	1,	0,	0,	0,	1,	0,	1,	1,	1,	1,	0,	1,	1,	1,	1],	// Dot
		[0,	0,	0,	0,	0,	1,	1,	1,	1,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	1,	1,	1,	1],	// B
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// M
		[0,	0,	0,	0,	0,	1,	1,	1,	1,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	1,	1,	1,	0],	// R
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	0,	0],	// W
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0],	// G
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0],	// TM
		[0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0,	0,	1,	0,	0,	0,	0,	0,	0],	// TC
		[0,	0,	0,	0,	0,	1,	1,	1,	1,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	0,	1,	0,	0,	1,	0,	0,	1],	// E
	];

	return TOKENS.map((_, i) => {
		const gi = groups.findIndex(g => g.includes(i));

		return TOKENS.map((_, j) => {
			const gj = groups.findIndex(g => g.includes(j));
			console.assert(gj >= 0, "invalid j:", j, groups);

			return group_mask[gi][gj];
		});
	});
};


const TOKEN_TRANSFER_TABLE = make();



export {
	TOKEN_TRANSFER_TABLE,
};
